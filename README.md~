# PLUMCOT corpus (not ready for prime time)

This repository provides a Python API to access the PLUMCOT corpus programmatically.

## Installation

Until the package has been published on PyPI, one has to run the following commands:

```bash
$ git clone https://github.com/hbredin/pyannote-db-plumcot.git
$ pip install pyannote-db-plumcot
```

## API

```python
>>> from pyannote.database import get_protocol
>>> buffy = get_protocol('Plumcot.Collection.BuffyTheVampireSlayer')
>>> for episode in buffy.files():
...     print(episode)
```

<<<<<<< HEAD
The creation of this file should be automated as much as possible. Ideally, a script would take `series.txt` as input and generate all `episodes.txt` file at once (or just one if an optional series identifier is provided)

```bash
python episodes.py series.txt TheBigBangTheory
```

For movies, we can use something like `HarryPotter.Episode01` as "episode" unique identifier.

Note: Leo can probably do this script.

### `credits.txt`

This file provides the list of characters credited in each episode. It contains one line per episode. Each episode is denoted by its normalized identifier (e.g. `TheBigBangTheory.Season01.Episode01`).

The line starts with one field for the episode and then one boolean for each character of the series/movie, with 1 if the character appears in the episode, 0 otherwise.

For instance, the line below tells that 3 characters appear in episode 1 of season 1 of The Big Bang Theory

```
TheBigBangTheory.Season01.Episode01,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0...
```

The ith binary column corresponds to the ith line in characters.txt

The creation of this file should be automated as much as possible. Ideally, a script would take `series.txt` as input and generate all `credits.txt` at once (or just one if an optional series identifier is provided)

```bash
python episodes.py series.txt TheBigBangTheory -c
```

Note: Leo is in charge of creating this script

### `transcripts.txt`

This file provides the manual transcripts of all episodes in `episodes.txt`. It contains one line per speech turn.

The expected file format is the following: unique series identifier, unique character identifier, followed by the actual transcription.

```
TheBigBangTheory.Season01.Episode01 sheldon_cooper How are you, Leonard?
TheBigBangTheory.Season01.Episode01 leonard_hoffstadter Good, and you?
```

It is unlikely that we will be able to code *one script to rule them all* generic enough to process all series. It will most likely need a lot of manual cleaning.

This is why we will start by focusing on a sub-sample of the (eventually bigger) corpus.

Note: here is a "who is doing what" split

* Harry Potter : Ruiqing
* The Big Bang Theory : Leo
* Lost : Benjamin
* Game of Thrones : Aman
* Buffy the Vampire Slayer : Hervé
* Battlestar Galactica : Benjamin
* The Good Wife : Claude

### `alignment.stm`

This file provides the forced-aligned transcripts of all episodes in episodes.txt. It contains one line per word using the [`stm`](http://www1.icsi.berkeley.edu/Speech/docs/sctk-1.2/infmts.htm#stm_fmt_name_0) or [`ctm`](https://web.archive.org/web/20170119114252/http://www.itl.nist.gov/iad/mig/tests/rt/2009/docs/rt09-meeting-eval-plan-v2.pdf) file format.

```
TheBigBangTheory.Season01.Episode01 1 sheldon_cooper start_time end_time <> How
TheBigBangTheory.Season01.Episode01 1 sheldon_cooper start_time end_time <> are
TheBigBangTheory.Season01.Episode01 1 sheldon_cooper start_time end_time <> you
TheBigBangTheory.Season01.Episode01 1 sheldon_cooper start_time end_time <> ,
TheBigBangTheory.Season01.Episode01 1 sheldon_cooper start_time end_time <> Leonard
TheBigBangTheory.Season01.Episode01 1 sheldon_cooper start_time end_time <> ?
```

Note : Benjamin and Hervé will take care of it.

### `entities.txt`

This file contains named entities annotation of `alignment.stm`.

The proposed file format is the following:

```
word_id file_id channel_id speaker_id start_time end_time <> word named_entity_type normalized_name coreference_id
```

```
1 TheBigBangTheory.Season01.Episode01 1 sheldon_cooper start_time end_time <> How     <>     <>                  <>
2 TheBigBangTheory.Season01.Episode01 1 sheldon_cooper start_time end_time <> are     <>     <>                  <>
3 TheBigBangTheory.Season01.Episode01 1 sheldon_cooper start_time end_time <> you     <>     <>                  5/6
4 TheBigBangTheory.Season01.Episode01 1 sheldon_cooper start_time end_time <> ,       <>     <>                  <>
5 TheBigBangTheory.Season01.Episode01 1 sheldon_cooper start_time end_time <> Leonard PERSON leonard_hofstadter  <>
6 TheBigBangTheory.Season01.Episode01 1 sheldon_cooper start_time end_time <> Hofstadter PERSON leonard_hofstadter  <>
7 TheBigBangTheory.Season01.Episode01 1 sheldon_cooper start_time end_time <> ?       <>     <>                  <>
```

```
1 TheBigBangTheory.Season01.Episode01 1 sheldon_cooper start_time end_time <> How     <>     <>                  <>
2 TheBigBangTheory.Season01.Episode01 1 sheldon_cooper start_time end_time <> are     <>     <>                  <>
3 TheBigBangTheory.Season01.Episode01 1 sheldon_cooper start_time end_time <> you     <>     <>                  5/7
4 TheBigBangTheory.Season01.Episode01 1 sheldon_cooper start_time end_time <> ,       <>     <>                  <>
5 TheBigBangTheory.Season01.Episode01 1 sheldon_cooper start_time end_time <> Sheldon PERSON sheldon_cooper  <>
6 TheBigBangTheory.Season01.Episode01 1 sheldon_cooper start_time end_time <> and <> <>  <>
7 TheBigBangTheory.Season01.Episode01 1 sheldon_cooper start_time end_time <> Leonard PERSON leonard_hofstadter  <>
8 TheBigBangTheory.Season01.Episode01 1 sheldon_cooper start_time end_time <> ?       <>     <>                  <>
```

Note: Leo has a script to do that, though the (automatic) output will need a manual correction pass.


### scene / narrative stuff
=======
## Raw data
>>>>>>> 150c0df7e7192c3ac2dd09a742ef58edbb3efb11

If needs be, one can also find the raw data as text file in `Plumcot/data` sub-directory.
